Grammar
=======
S -> A
A -> int + A | int

First/Follow
============
First(S) = First(A)
Follow(S) = { $ }
First(A) = { int }
Follow(A) = { $ }
Follow(int) = { +, $ }
Follow("+") = { int }

States
======
[0] S -> .A
    A -> .int + A
    A -> .int
[1] S -> A.
[2] A -> int. + A
    A -> int.
 [3] A -> int +. A
     A -> .int + A
     A -> .int
  [4] A -> int + A.

Action Table
=============
      | next
state |  A        +        int        $        S
------+-----------------------------------------------
   0  |  shift 1  x        shift 2   accept    accept
   1  |  x        x        x         reduce
   2  |  x        shift 3  x         reduce
   3  |  shift 4  x        shift 2   x
   4  |  x        x        x         reduce

Reduce Table
=============
// Format: #/goto/sym
// # = number of items to reduce
// sym = symbol to replace after reduce
      | next
state |  $
------+-------------
   0  |  x
   1  |  1/S
   2  |  1/A
   3  |  x
   4  |  3/A
