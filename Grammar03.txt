Grammar
=======
S -> A
A -> B + A | B * A | B
B -> int | (A)


First/Follow
============
First(S) = { int, ( }
First(A) = { int, ( }
First(B) = { int, ( }
Follow(S) = { $ }
Follow(A) = { $, ), +, * }
Follow(B) = { $, ), +, * }
Follow("int") = { $, ), +, * }
Follow("(") = { int, ( }
Follow(")") = { $, ), +, * }
Follow("+") = { int, ( }
Follow("*") = { int, ( }

States
======
[0] S -> .A
    A -> .B + A
    A -> .B * A
    A -> .B
    B -> .int
    B -> .(A)
[1] S -> A.
[2] A -> B. + A
 [3] A -> B + .A
  [4] A -> B + A.
[5] A -> B. * A
 [6] A -> B * .A
  [7] A -> B * A.
[8] A -> B.
[9] B -> int.
[10] B -> (.A)
 [11] B -> (A.)
  [12] B -> (A).

Action Table
=============
// "r" = Reduce
// "=" = Accept
// "x" = Error
//  #  = Shift to #

      | next
state |  A  B  +  *  (  )  int  $  S
------+--------------------------------
   0  |  1  x  x  x  10 x  9    =  =
   1  |  x  x  x  x  x  x  x    r
   2  |  x  x  3  x  x  x  x    x
   3  |  4  8  x  x  10 x  9    x
   4  |  x  x  r  r  x  r  x    r
   5  |  x  x  x  6  x  x  x    x
   6  |  7  8  x  x  10 x  9    x
   7  |  x  x  r  r  x  r  x    r
   8  |  x  x  r  r  x  r  x    r
   9  |  x  x  r  r  x  r  x    r
   10 |  11 8  x  x  10 x  9    x  
   11 |  x  x  x  x  x  12 x    x  
   12 |  x  x  r  r  x  r  x    r  

Reduce Table
=============
// Format: #/sym
// # = number of items to reduce
// sym = symbol to replace after reduce
      | next
state |  +   *   )   $
------+-------------
   0  |  x   x   x   x  
   1  |  x   x   x   1/S
   2  |  x   x   x   x  
   3  |  x   x   x   x  
   4  |  3/A 3/A 3/A 3/A
   5  |  x   x   x   x   
   6  |  x   x   x   x   
   7  |  3/A 3/A 3/A 3/A
   8  |  1/A 1/A 1/A 1/A
   9  |  1/B 1/B 1/B 1/B
   10 |  x   x   x   x   
   11 |  x   x   x   x   
   12 |  3/B 3/B 3/B 3/B
